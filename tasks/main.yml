---
- name: Validate system requirements
  block:
    - name: Check kernel version
      ansible.builtin.shell: uname -r
      register: kernel_version
      changed_when: false
    
    - name: Validate kernel version
      ansible.builtin.assert:
        that: kernel_version.stdout is version('4.0', '>=')
        msg: "Kernel version must be 4.0 or higher"
      
    - name: Check memory
      ansible.builtin.shell: free -g | awk '/Mem:/ {print $2}'
      register: system_memory
      changed_when: false
      
    - name: Validate minimum memory
      ansible.builtin.assert:
        that: system_memory.stdout | int >= 2
        msg: "Minimum 2GB RAM required"

- name: Check current swap status
  ansible.builtin.shell: |
    swapon --show | wc -l
  register: swap_active_count
  changed_when: false

- name: Disable swap if active
  ansible.builtin.command: swapoff -a
  when: swap_active_count.stdout != "0"
  register: swapoff_result
  changed_when: swapoff_result.rc == 0

- name: Backup fstab
  ansible.builtin.copy:
    src: /etc/fstab
    dest: "/etc/fstab.bak-{{ ansible_date_time.epoch }}"
    remote_src: true
    mode: '0644'

- name: Permanently disable swap in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+.*)$'
    replace: '#\1'
    backup: yes

- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Create k8s.conf directory
  ansible.builtin.file:
    path: /etc/modules-load.d/k8s.conf
    state: touch
    mode: '0755'

- name: Ensure br_netfilter module is loaded
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: "br_netfilter"
    state: present

- name: Ensure overlay module is loaded
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: "overlay"
    state: present

- name: Load necessary kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Configurer les param√®tres sysctl Kubernetes
  ansible.builtin.blockinfile:
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
    dest: /etc/sysctl.d/k8s.conf
    owner: root
    group: root
    mode: '0644'

- name: Apply sysctl params without reboot
  ansible.builtin.command: sysctl --system
  changed_when: false

- name: Download containerd binary
  ansible.builtin.get_url:
    url: '{{ containerd_release_url }}'
    dest: '{{ containerd_release_dest }}'
    mode: '0644'

- name: Extract containerd
  ansible.builtin.unarchive:
    src: '{{ containerd_release_dest }}'
    dest: /usr/local
    remote_src: true
    mode: '0755'

- name: Create containerd configuration directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Generate default containerd configuration file
  ansible.builtin.shell: |
    set -o pipefail
    /usr/local/bin/containerd config default | sudo tee /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml
  changed_when: false

- name: Set SystemdCgroup to true in containerd config
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: '^(systemd_cgroup = ).*$'
    replace: '\1true'

- name: Download containerd systemd service file
  ansible.builtin.get_url:
    url: '{{ containerd_service_url }}'
    dest: /etc/systemd/system/containerd.service
    mode: '0644'
    force: true
  notify:
    - Reload systemd
    - Enable and start containerd

- name: Download runc binary to temp
  ansible.builtin.get_url:
    url: '{{ runc_release_url }}'
    dest: '{{ runc_release_dest }}'
    mode: '0755'

- name: Copy runc binary to final location
  ansible.builtin.copy:
    src: '{{ runc_release_dest }}'
    dest: /usr/local/sbin/runc
    remote_src: yes
    mode: '0755'

- name: Create cni directory
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'

- name: Download CNI plugins
  ansible.builtin.get_url:
    url: '{{ cni_plugins_url }}'
    dest: '{{ cni_plugins_dest }}'
    mode: '0644'

- name: Extract CNI plugins
  ansible.builtin.unarchive:
    src: '{{ cni_plugins_dest }}'
    dest: /opt/cni/bin
    remote_src: true
    mode: '0755'

- name: Update repository cache
  ansible.builtin.apt:
    update_cache: true

- name: Download and Install GPG key for Kubernetes
  ansible.builtin.shell: |
    set -o pipefail
    curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  vars:
    k8s_version: "v1.34"

- name: Add Kubernetes apt repository
  ansible.builtin.apt_repository:
    repo: "{{ k8s_repository }}"
    state: present
    filename: kubernetes

- name: Update repository cache after adding Kubernetes repo
  ansible.builtin.apt:
    update_cache: true

- name: Install Kubernetes components
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    force: true

- name: Hold kubelet, kubeadm et kubectl
  ansible.builtin.command: apt-mark hold {{ item }}
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Configure kubelet to use containerd
  ansible.builtin.lineinfile:
    path: /etc/default/kubelet
    line: 'KUBELET_EXTRA_ARGS="--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock"'
    create: yes
  notify:
    - Ensure kubelet service is enabled and started

- name: Clean up temporary files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/containerd-2.1.4-linux-amd64.tar.gz
    - /tmp/cni-plugins-linux-amd64-v1.8.0.tgz